apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-db-initializer
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
  labels:
    app: {{ .Release.Name }}-db-init
spec:
  template:
    spec:
      containers:
      - name: init-database
        image: postgres:13
        env:
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: db-password
        - name: PGPASSWORD  # Set PGPASSWORD for automatic password usage by psql
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: db-password
        - name: USER_SUBSCRIPTION_DB
          value: "user_subscription_db"
        - name: USER_SUBSCRIPTION_DB_USER
          value: "user_subscription_user"
        - name: USER_SUBSCRIPTION_DB_PASSWORD
          value: "subscription_password"
        - name: STOCK_DATA_DB
          value: "stock_data_db"
        - name: STOCK_DATA_DB_USER
          value: "stock_data_user"
        - name: STOCK_DATA_DB_PASSWORD
          value: "stock_password"
        - name: MAKERKIT_TURBO_DB
          value: "makerkit_db"
        - name: MAKERKIT_TURBO_DB_USER
          value: "makerkit_user"
        - name: MAKERKIT_TURBO_DB_PASSWORD
          value: "securepassword"
        volumeMounts:
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d/
        command:
          - "sh"
          - "-c"
          - |
            echo "Starting database and user initialization"

            until pg_isready -h {{ .Release.Name }}-postgres -p 5432 -U "$POSTGRES_USER"; do
              >&2 echo "PostgreSQL is unavailable - sleeping"
              sleep 5
            done

            echo "PostgreSQL is ready. Creating databases and users if not already present..."

            # Check if the databases exist, create if they don't
            echo "Checking if database $USER_SUBSCRIPTION_DB exists..."
            if psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -tc "SELECT 1 FROM pg_database WHERE datname = '$USER_SUBSCRIPTION_DB'" | grep -q 1; then
              echo "Database $USER_SUBSCRIPTION_DB already exists."
            else
              echo "Database $USER_SUBSCRIPTION_DB does not exist, creating..."
              psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "CREATE DATABASE \"$USER_SUBSCRIPTION_DB\""
            fi

            echo "Checking if database $STOCK_DATA_DB exists..."
            if psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -tc "SELECT 1 FROM pg_database WHERE datname = '$STOCK_DATA_DB'" | grep -q 1; then
              echo "Database $STOCK_DATA_DB already exists."
            else
              echo "Database $STOCK_DATA_DB does not exist, creating..."
              psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "CREATE DATABASE \"$STOCK_DATA_DB\""
            fi

            # Create users for each database if not already present
            echo "Checking if user $USER_SUBSCRIPTION_DB_USER exists..."
            if psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -tc "SELECT 1 FROM pg_roles WHERE rolname = '$USER_SUBSCRIPTION_DB_USER'" | grep -q 1; then
              echo "User $USER_SUBSCRIPTION_DB_USER already exists."
            else
              echo "User $USER_SUBSCRIPTION_DB_USER does not exist, creating..."
              psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "CREATE ROLE \"$USER_SUBSCRIPTION_DB_USER\" WITH LOGIN PASSWORD '$USER_SUBSCRIPTION_DB_PASSWORD';"
            fi

            echo "Checking if user $STOCK_DATA_DB_USER exists..."
            if psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -tc "SELECT 1 FROM pg_roles WHERE rolname = '$STOCK_DATA_DB_USER'" | grep -q 1; then
              echo "User $STOCK_DATA_DB_USER already exists."
            else
              echo "User $STOCK_DATA_DB_USER does not exist, creating..."
              psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "CREATE ROLE \"$STOCK_DATA_DB_USER\" WITH LOGIN PASSWORD '$STOCK_DATA_DB_PASSWORD';"
            fi

            # Grant privileges to the new users
            echo "Granting privileges on $USER_SUBSCRIPTION_DB to $USER_SUBSCRIPTION_DB_USER..."
            psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "GRANT ALL PRIVILEGES ON DATABASE \"$USER_SUBSCRIPTION_DB\" TO \"$USER_SUBSCRIPTION_DB_USER\";"
            echo "Privileges granted."

            echo "Granting privileges on $STOCK_DATA_DB to $STOCK_DATA_DB_USER..."
            psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "GRANT ALL PRIVILEGES ON DATABASE \"$STOCK_DATA_DB\" TO \"$STOCK_DATA_DB_USER\";"
            echo "Privileges granted."

            # Create tables in the user subscription database
            echo "Connecting to database $USER_SUBSCRIPTION_DB and creating tables..."
            if [ -f /docker-entrypoint-initdb.d/create_user_subscription_db.sql ]; then
              PGPASSWORD="$USER_SUBSCRIPTION_DB_PASSWORD" psql -h {{ .Release.Name }}-postgres -d "$USER_SUBSCRIPTION_DB" -U "$USER_SUBSCRIPTION_DB_USER" -f /docker-entrypoint-initdb.d/create_user_subscription_db.sql || \
                echo "Error: Failed to create tables in $USER_SUBSCRIPTION_DB."
            else
              echo "SQL script for user_subscription_db not found."
            fi

            # Create tables in the stock data database
            echo "Connecting to database $STOCK_DATA_DB and creating tables..."
            if [ -f /docker-entrypoint-initdb.d/create_stock_data_db.sql ]; then
              PGPASSWORD="$STOCK_DATA_DB_PASSWORD" psql -h {{ .Release.Name }}-postgres -d "$STOCK_DATA_DB" -U "$STOCK_DATA_DB_USER" -f /docker-entrypoint-initdb.d/create_stock_data_db.sql || \
                echo "Error: Failed to create tables in $STOCK_DATA_DB."
            else
              echo "SQL script for stock_data_db not found."
            fi
            # Check if MakerkitTurbo_db exists
            echo "Checking if database $MAKERKIT_TURBO_DB exists..."
            if psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -tc "SELECT 1 FROM pg_database WHERE datname = '$MAKERKIT_TURBO_DB'" | grep -q 1; then
             echo "Database $MAKERKIT_TURBO_DB already exists."
            else
             echo "Database $MAKERKIT_TURBO_DB does not exist, creating..."
             psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "CREATE DATABASE \"$MAKERKIT_TURBO_DB\""
            fi

          # Check if MakerkitTurbo_db user exists
            echo "Checking if user $MAKERKIT_TURBO_DB_USER exists..."
           if psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -tc "SELECT 1 FROM pg_roles WHERE rolname = '$MAKERKIT_TURBO_DB_USER'" | grep -q 1; then
             echo "User $MAKERKIT_TURBO_DB_USER already exists."
            else
             echo "User $MAKERKIT_TURBO_DB_USER does not exist, creating..."
             psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "CREATE ROLE \"$MAKERKIT_TURBO_DB_USER\" WITH LOGIN PASSWORD '$MAKERKIT_TURBO_DB_PASSWORD';"
           fi

           # Grant privileges to MakerkitTurbo_db user
            echo "Granting privileges on $MAKERKIT_TURBO_DB to $MAKERKIT_TURBO_DB_USER..."
            psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "GRANT ALL PRIVILEGES ON DATABASE \"$MAKERKIT_TURBO_DB\" TO \"$MAKERKIT_TURBO_DB_USER\";"
            echo "Privileges granted."

          # Execute the create_MakerkitTurbo_db.sql script
            echo "Connecting to database $MAKERKIT_TURBO_DB and creating tables..."
           if [ -f /docker-entrypoint-initdb.d/create_MakerkitTurbo_db.sql ]; then
             PGPASSWORD="$MAKERKIT_TURBO_DB_PASSWORD" psql -h {{ .Release.Name }}-postgres -d "$MAKERKIT_TURBO_DB" -U "$MAKERKIT_TURBO_DB_USER" -f /docker-entrypoint-initdb.d/create_MakerkitTurbo_db.sql || \
             echo "Error: Failed to create tables in $MAKERKIT_TURBO_DB."
            else
              echo "SQL script for MakerkitTurbo_db not found."
            fi


            echo "Database and user initialization complete."
      restartPolicy: OnFailure
      volumes:
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
  backoffLimit: 4
