apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-db-initializer
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
  labels:
    app: {{ .Release.Name }}-db-init
spec:
  template:
    spec:
      containers:
      - name: init-database
        image: postgres:13
        env:
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: db-password
        - name: PGPASSWORD  # Set PGPASSWORD for automatic password usage by psql
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: db-password
        - name: USER_SUBSCRIPTION_DB
          value: "{{ .Values.global.postgresql.auth.user_subscription_db.name | default "default_subscription_db" }}"
        - name: USER_SUBSCRIPTION_DB_USER
          value: "{{ .Values.global.postgresql.auth.user_subscription_db.user | default "default_user" }}"
        - name: USER_SUBSCRIPTION_DB_PASSWORD
          value: "{{ .Values.global.postgresql.auth.user_subscription_db.password | default "default_password" }}"
        - name: STOCK_DATA_DB
          value: "{{ .Values.global.postgresql.auth.stock_data_db.name | default "default_stock_data_db" }}"
        - name: STOCK_DATA_DB_USER
          value: "{{ .Values.global.postgresql.auth.stock_data_db.user | default "default_user" }}"
        - name: STOCK_DATA_DB_PASSWORD
          value: "{{ .Values.global.postgresql.auth.stock_data_db.password | default "default_password" }}"
        command:
          - "sh"
          - "-c"
          - |
            echo "Starting database and user initialization"

            until pg_isready -h {{ .Release.Name }}-postgres -p 5432 -U "$POSTGRES_USER"; do
              >&2 echo "PostgreSQL is unavailable - sleeping"
              sleep 5
            done

            echo "Creating databases and users if not already present..."

            # Use the "postgres" database to create new databases and roles
            psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -tc "SELECT 1 FROM pg_database WHERE datname = '$USER_SUBSCRIPTION_DB'" | grep -q 1 || \
              psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "CREATE DATABASE \"$USER_SUBSCRIPTION_DB\""

            psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -tc "SELECT 1 FROM pg_database WHERE datname = '$STOCK_DATA_DB'" | grep -q 1 || \
              psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "CREATE DATABASE \"$STOCK_DATA_DB\""

            # Create users for each database if not already present
            psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '$USER_SUBSCRIPTION_DB_USER') THEN CREATE ROLE \"$USER_SUBSCRIPTION_DB_USER\" WITH LOGIN PASSWORD '$USER_SUBSCRIPTION_DB_PASSWORD'; END IF; END \$\$;"
            psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '$STOCK_DATA_DB_USER') THEN CREATE ROLE \"$STOCK_DATA_DB_USER\" WITH LOGIN PASSWORD '$STOCK_DATA_DB_PASSWORD'; END IF; END \$\$;"

            # Grant privileges to the new users
            psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "GRANT ALL PRIVILEGES ON DATABASE \"$USER_SUBSCRIPTION_DB\" TO \"$USER_SUBSCRIPTION_DB_USER\";"
            psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "GRANT ALL PRIVILEGES ON DATABASE \"$STOCK_DATA_DB\" TO \"$STOCK_DATA_DB_USER\";"

            # Create tables in the user subscription database
            echo "\c \"$USER_SUBSCRIPTION_DB\";" | psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" && \
            echo "$CREATE_USER_SUBSCRIPTION_DB_SQL" | psql -h {{ .Release.Name }}-postgres -d "$USER_SUBSCRIPTION_DB" -U "$USER_SUBSCRIPTION_DB_USER"

            # Create tables in the stock data database
            echo "\c \"$STOCK_DATA_DB\";" | psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" && \
            echo "$CREATE_STOCK_DATA_DB_SQL" | psql -h {{ .Release.Name }}-postgres -d "$STOCK_DATA_DB" -U "$STOCK_DATA_DB_USER"

            echo "Database and user initialization complete."
      volumeMounts:
        - name: init-sql
          mountPath: /docker-entrypoint-initdb.d
      restartPolicy: OnFailure
  backoffLimit: 4
  volumes:
    - name: init-sql
      configMap:
        name: postgres-init-sql-configmap
