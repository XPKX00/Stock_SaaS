apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-db-initializer
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
  labels:
    app: {{ .Release.Name }}-db-init
spec:
  template:
    spec:
      volumes:
      - name: init-scripts
        configMap:
          name: postgres-config-scripts  # Assuming this ConfigMap stores the SQL scripts
      containers:
      - name: init-database
        image: postgres:13
        env:
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: db-password
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: db-password
        - name: USER_SUBSCRIPTION_DB
          value: "{{ .Values.global.postgresql.auth.user_subscription_db.name | default "default_subscription_db" }}"
        - name: USER_SUBSCRIPTION_DB_USER
          value: "{{ .Values.global.postgresql.auth.user_subscription_db.user | default "default_user" }}"
        - name: USER_SUBSCRIPTION_DB_PASSWORD
          value: "{{ .Values.global.postgresql.auth.user_subscription_db.password | default "default_password" }}"
        - name: STOCK_DATA_DB
          value: "{{ .Values.global.postgresql.auth.stock_data_db.name | default "default_stock_data_db" }}"
        - name: STOCK_DATA_DB_USER
          value: "{{ .Values.global.postgresql.auth.stock_data_db.user | default "default_user" }}"
        - name: STOCK_DATA_DB_PASSWORD
          value: "{{ .Values.global.postgresql.auth.stock_data_db.password | default "default_password" }}"
        volumeMounts:
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d/
        command:
          - "sh"
          - "-c"
          - |
            echo "Starting database and user initialization"

            until pg_isready -h {{ .Release.Name }}-postgres -p 5432 -U "$POSTGRES_USER"; do
              >&2 echo "PostgreSQL is unavailable - sleeping"
              sleep 5
            done

            echo "PostgreSQL is ready. Creating databases and users if not already present..."

            # Check if the databases exist, create if they don't
            echo "Checking if database $USER_SUBSCRIPTION_DB exists..."
            psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -tc "SELECT 1 FROM pg_database WHERE datname = '$USER_SUBSCRIPTION_DB'" | grep -q 1 || \
              psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "CREATE DATABASE \"$USER_SUBSCRIPTION_DB\""
            echo "Database $USER_SUBSCRIPTION_DB created or already exists."

            echo "Checking if database $STOCK_DATA_DB exists..."
            psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -tc "SELECT 1 FROM pg_database WHERE datname = '$STOCK_DATA_DB'" | grep -q 1 || \
              psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "CREATE DATABASE \"$STOCK_DATA_DB\""
            echo "Database $STOCK_DATA_DB created or already exists."

            # Create users for each database if not already present
            echo "Checking if user $USER_SUBSCRIPTION_DB_USER exists..."
            psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '$USER_SUBSCRIPTION_DB_USER') THEN CREATE ROLE \"$USER_SUBSCRIPTION_DB_USER\" WITH LOGIN PASSWORD '$USER_SUBSCRIPTION_DB_PASSWORD'; END IF; END \$\$;"
            echo "User $USER_SUBSCRIPTION_DB_USER created or already exists."

            echo "Checking if user $STOCK_DATA_DB_USER exists..."
            psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '$STOCK_DATA_DB_USER') THEN CREATE ROLE \"$STOCK_DATA_DB_USER\" WITH LOGIN PASSWORD '$STOCK_DATA_DB_PASSWORD'; END IF; END \$\$;"
            echo "User $STOCK_DATA_DB_USER created or already exists."

            # Grant privileges to the new users
            echo "Granting privileges on $USER_SUBSCRIPTION_DB to $USER_SUBSCRIPTION_DB_USER..."
            psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "GRANT ALL PRIVILEGES ON DATABASE \"$USER_SUBSCRIPTION_DB\" TO \"$USER_SUBSCRIPTION_DB_USER\";"
            echo "Privileges granted."

            echo "Granting privileges on $STOCK_DATA_DB to $STOCK_DATA_DB_USER..."
            psql -h {{ .Release.Name }}-postgres -d postgres -U "$POSTGRES_USER" -c "GRANT ALL PRIVILEGES ON DATABASE \"$STOCK_DATA_DB\" TO \"$STOCK_DATA_DB_USER\";"
            echo "Privileges granted."

            # Create tables in the user subscription database
            echo "Connecting to database $USER_SUBSCRIPTION_DB and creating tables..."
            PGPASSWORD="$USER_SUBSCRIPTION_DB_PASSWORD" psql -h {{ .Release.Name }}-postgres -d "$USER_SUBSCRIPTION_DB" -U "$USER_SUBSCRIPTION_DB_USER" -f /docker-entrypoint-initdb.d/create_user_subscription_db.sql || \
              echo "Error: Failed to create tables in $USER_SUBSCRIPTION_DB."

            # Create tables in the stock data database
            echo "Connecting to database $STOCK_DATA_DB and creating tables..."
            PGPASSWORD="$STOCK_DATA_DB_PASSWORD" psql -h {{ .Release.Name }}-postgres -d "$STOCK_DATA_DB" -U "$STOCK_DATA_DB_USER" -f /docker-entrypoint-initdb.d/create_stock_data_db.sql || \
              echo "Error: Failed to create tables in $STOCK_DATA_DB."

            echo "Database and user initialization complete."
      restartPolicy: OnFailure
  backoffLimit: 4
